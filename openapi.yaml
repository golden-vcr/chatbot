openapi: 3.0.3
info:
  version: 0.1.0
  title: chatbot
  description: |
    The **chatbot** service runs an IRC chat bot that connects to the Twitch chat
    channel for Golden VCR and 
externalDocs:
  description: 'github.com/golden-vcr/chatbot'
  url: https://github.com/golden-vcr/chatbot
servers:
  - url: https://goldenvcr.com/api/chatbot
tags:
  - name: connection
    description: |-
      Admin-only endpoints used to authenticate the bot and connect it to IRC
  - name: chatlog
    description: |-
      Endpoints that expose a real-time log of chat messages occurring in the channel
paths:
  /status:
    get:
      tags:
        - connection
      summary: |-
        Returns the current status of the chat bot, i.e. whether it's connected to the
        desired Twitch chat channel
      operationId: getStatus
      responses:
        '200':
          description: |-
            Status was successfully retrieved.
  /login:
    get:
      tags:
        - connection
      summary: |-
        Redirects the client to a Twitch login page where they must authenticate as the
        TapeBoy Twitch account and authorize chat bot app access
      operationId: getLogin
      responses:
        '302':
          description: |-
            The client should be redirected to the URL in the `Location` header,
            initiating an OAuth Authorization Code Grant flow on id.twitch.tv. The
            `redirect_uri` will send the code to the `/auth` endpoint when finished.
  /auth:
    get:
      tags:
        - connection
      summary: |-
        Completes an OAuth code grant flow and attempts to authenticate as TapeBoy,
        reestablishing an IRC connection and joining the GoldenVCR channel if OK
      operationId: getAuth
      responses:
        '200':
          description: |-
            The chat bot account was successfully authenticated; the service has
            reinitialized an IRC bot by connecting to Twitch IRC with a user access
            token and joining the desired channel. User credentials for the bot account
            will be stored until logout.
        '401':
          description: |-
            The authorization code grant flow was not completed successfully; user
            identity could not be determined.
        '403':
          description: |-
            Authentication completed successfully but you are not logged in to the
            designated `TapeBoy` Twitch account.
  /logout:
    post:
      tags:
        - connection
      summary: |-
        Disconnects the bot from IRC and logs it out, clearing any cached user access or
        refresh tokens
      security:
        - twitchUserAccessToken: []
      description: |-
        Requires an access token with broadcaster-level access.
      responses:
        '200':
          description: |-
            The chat bot is no longer connected to IRC (if it ever was) and all
            previously-stored credentials for that bot have been purged.
  /chatlog:
    get:
      tags:
        - chatlog
      summary: |-
        Provides a client with real-time chat messages
      description: |
        This SSE endpoint, designed primarily for use by the stream graphics overlay,
        provides clients with a JSON message any time the chat log should be updated,
        either to display a new message or to clear existing messages.

        Chat events carry a `type` value that indicates whether they're a message, a
        control event (such a deleting or clearing messages), etc.

        For message events, the message text uses a custom format to encode emotes:

        - Any occurrence of `$$` represents a literal dollar sign and should be rendered
          as `$`

        - Any occurrence of `$i` (where `i` is an integer) is a reference to an emote
          from the event's `emotes` array. If `emotes[i].url` is a valid URL, then the
          `$i` placeholder should be replaced and rendered as an image element with that
          URL as its source. If `emotes[i].url` is not valid, then a sentinel value
          indicating `emotes[i].name` should be rendered instead.

        In the example message event given below, the chat line should be rendered as:

        - <font color="#00FF7F"><b>wasabimilkshake:</b></font> hello, I have $5 and this is an emote: <img alt="wasabi22Denton" src="https://static-cdn.jtvnw.net/emoticons/v2/emotesv2_9d94d65bbef64763b7c09401156ea0bc/default/dark/1.0" />
      operationId: getChat
      responses:
        '200':
          description: |-
            The HTTP connection opened for this request will be kept open, and the
            server will write JSON-serialized `chatlog.Event` objects into the response
            body until the connection is closed.
          content:
            text/event-stream:
              examples:
                append:
                  summary: A newly-sent user message should be appended to the log
                  value:
                    type: append
                    payload:
                      messageId: 4cbc3d2a-4606-43d0-a9f3-2788fe50d352
                      username: wasabimilkshake
                      color: '#00FF7F'
                      text: 'hello, I have $$5 and this is an emote: $0'
                      emotes:
                        - name: wasabi22Denton
                          url: https://static-cdn.jtvnw.net/emoticons/v2/emotesv2_9d94d65bbef64763b7c09401156ea0bc/default/dark/1.0
                delete:
                  summary: One or more recent messages should be deleted
                  value:
                    type: delete
                    payload:
                      messageIds:
                        - 4cbc3d2a-4606-43d0-a9f3-2788fe50d352
                clear:
                  summary: The entire chat log should be cleared
                  value:
                    type: clear
components:
  securitySchemes:
    twitchUserAccessToken:
      type: http
      scheme: bearer
